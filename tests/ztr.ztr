#!/usr/bin/env zsh
autoload -U colors && colors
source ${0:h}/../ztr.zsh

typeset -i failures
typeset -i passes

should_pass() {
	local result

	eval $1 &>/dev/null

	if (( $? )); then
		(( failures++ ))
		result="$fg[red]FAIL$reset_color"
	else
		(( passes++ ))
		result="$fg[green]PASS$reset_color"
	fi

	'builtin' 'print' $result $2
}

should_fail() {
	local result

	eval $1 &>/dev/null

	if (( $? )); then
		(( passes++ ))
		result="$fg[green]PASS$reset_color"
	else
		(( failures++ ))
		result="$fg[red]FAIL$reset_color"
	fi

	'builtin' 'print' $result $2
}

# counts pt 1
should_fail "(( ZTR_COUNT_FAIL ))" "fail count starts at zero"
should_fail "(( ZTR_COUNT_PASS ))" "pass count starts at zero"
should_fail "(( ZTR_COUNT_SKIP ))" "skip count starts at zero"

# basic
should_pass "ztr test true" "basic pass"
should_fail "ztr test false" "basic fail"

# [[ ]]
should_pass 'ztr test "[[ 1 == 1 ]]"' "evaluation, passing"
should_fail 'ztr test "[[ 1 == 2 ]]"' "evaluation, failing"

# dynamic arg
my_cmd='"[[ 1 == 1 ]]"' && should_pass "ztr test $my_cmd" "dynamic command, passing"
my_cmd='"[[ 1 == 2 ]]"' && should_fail "ztr test $my_cmd" "dynamic command, failing"

# dynamic value
my_var=1 && should_pass 'ztr test "[[ $my_var == 1 ]]"' "variable evaluation, not expanded in output, passing"
my_var=2 && should_fail 'ztr test "[[ $my_var == 1 ]]"' "variable evaluation, not expanded in output, failing"
my_var=1 && should_pass "ztr test '[[ $my_var == 1 ]]'" "variable evaluation, expanded in output, passing"
my_var=2 && should_fail "ztr test '[[ $my_var == 1 ]]'" "variable evaluation, expanded in output, failing"

# skip
should_pass "ztr skip true" "skip passes when test would pass"
should_pass "ztr skip false" "skip passes when test would fail"

# counts pt 2
should_pass "(( ZTR_COUNT_FAIL ))" "fail count increments"
should_pass "(( ZTR_COUNT_PASS ))" "pass count increments"
should_pass "(( ZTR_COUNT_SKIP ))" "skip count increments"

# clear
should_pass 'ztr test false || ztr clear && [[ $ZTR_COUNT_FAIL == 0 ]]' "clear zeros the fail count"
should_pass 'ztr test true && ztr clear && [[ $ZTR_COUNT_PASS == 0 ]]' "clear zeros the pass count"
should_pass 'ztr skip x && ztr clear && [[ $ZTR_COUNT_SKIP == 0 ]]' "clear zeros the skip count"

'builtin' 'print' \\n$(( passes + failures )) tests were run\
	\\n$passes passed\
	\\n$failures failed
return $failures
